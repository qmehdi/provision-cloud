---
AWSTemplateFormatVersion: '2010-09-09'
Description:
    This template deploys an Postgres RDS instance, a security group and a KMS Key to encrypt its storage.
Parameters:
    Env:
        Description: An environment name that will be prefixed to resource names
        Type: String
    DBName:
        Description: The database name
        Type: String
        MinLength: '4'
        MaxLength: '64'
    DBUser:
        Default: 'root'
        Description: The database admin account username
        Type: String
        MinLength: '4'
        MaxLength: '16'
        AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
        ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    DBPassword:
        NoEcho: 'true'
        Description: The database admin account password
        Type: String
        MinLength: '8'
        MaxLength: '41'
        AllowedPattern: '[a-zA-Z0-9]*'
        ConstraintDescription: must contain only alphanumeric characters.
    DBInstanceClass:
        Description: The database instance class
        Type: String
        AllowedValues:
        - db.t2.small
        - db.m3.medium
        - db.m4.large
        - db.m4.xlarge
    BackupRetentionPeriod:
        Description:  The number of days during which automatic DB snapshots are retained.
        Type: String
        Default: '7'
        AllowedValues:
        - '7'
        - '15'
        - '30'
    PreferredBackupWindow:
        Description:  The daily time range during which automated backups are performed.
        Type: String
        Default:  04:00-04:30
    PreferredMaintenanceWindow:
        Description:  The weekly time range (in UTC) during which system maintenance can occur.
        Type: String
        Default:  mon:04:30-mon:05:30
    EngineVersion:
        Description: The version number of the database engine that the DB instance uses.
        Type: String
        Default: 9.6
        AllowedValues:
            - 9.6
            - 10.4
    EnvType:
        Description: Environment type.
        Default: dev
        Type: String
        AllowedValues:
        - dev
        - prod
    AllocatedStorage:
        Description: The allocated storage size, specified in gigabytes (GB).
        Default: 100
        Type: String
        AllowedValues:
        - 50
        - 100
        - 250
        - 500
    DBSnapshotIdentifier:
        Description: The RDS MySQL snapshot name to restore to the new DB instance.
        Type: String
        Default: ""
Conditions:
  ISProduction:
    !Equals [!Ref EnvType, prod]
  UseDBSnapshot:
    !Not [!Equals [!Ref DBSnapshotIdentifier, ""]]
Resources:
    RDSKmsKey:
        Type: AWS::KMS::Key
        Properties:
          KeyPolicy:
            Version: 2012-10-17
            Id: !Sub ${Env}-${DBName}-RDS-KMSKey
            Statement:
                - Sid: Enable IAM User Permissions
                  Effect: Allow
                  Principal:
                    AWS: !Join
                      - ''
                      - - 'arn:aws:iam::'
                        - !Ref 'AWS::AccountId'
                        - ':root'
                  Action: 'kms:*'
                  Resource: '*'
          Tags:
            - Key: "Name"
              Value: !Sub "${Env}-${DBName}-kms-key"
    RDSKmsKeyALias:
        Type: AWS::KMS::Alias
        Properties:
            AliasName: !Sub "alias/${Env}/rds/${DBName}-kms-key"
            TargetKeyId:
                Ref: RDSKmsKey
    # RDSDB:
    #     Type: AWS::RDS::DBInstance
    #     Properties:
    #         DBName: !If [UseDBSnapshot, !Ref "AWS::NoValue", !Ref "DBName"]
    #         DBInstanceIdentifier: !Sub "${Env}-${DBName}"
    #         AllocatedStorage: '5'
    #         DBInstanceClass: !Ref 'DBInstanceClass'
    #         Engine: Postgres
    #         EngineVersion: !Ref EngineVersion
    #         MasterUsername: !Ref 'DBUser'
    #         MasterUserPassword: !Ref 'DBPassword'
    #         DBParameterGroupName: !Ref 'RDSParameterGroup'
    #         DBSubnetGroupName: !Sub "${Env}-${DBName}-SubnetGroup"
    #         CopyTagsToSnapshot: true
    #         VPCSecurityGroups:
    #             - !Ref 'RDSEC2SecurityGroup'
    #         BackupRetentionPeriod: !Ref BackupRetentionPeriod
    #         PreferredBackupWindow: !Ref PreferredBackupWindow
    #         PreferredMaintenanceWindow: !Ref PreferredMaintenanceWindow
    #         AllocatedStorage: !Ref AllocatedStorage
    #         MultiAZ:  !If [ISProduction, true, false]
    #         StorageType: gp2
    #         StorageEncrypted: true
    #         KmsKeyId: !Ref RDSKmsKey
    #         DBSnapshotIdentifier: !If [UseDBSnapshot, !Join [':', ['arn:aws:rds', !Ref "AWS::Region", !Ref "AWS::AccountId", 'snapshot:rds', !Ref DBSnapshotIdentifier]], !Ref "AWS::NoValue"]
    #         DeleteAutomatedBackups: false
    #         Tags:
    #             - Key: "Name"
    #               Value: !Sub "${Env}-${DBName}"

    DatabaseCluster:
      Type: AWS::RDS::DBCluster
      Properties:
        Engine: aurora-postgresql
        DatabaseName: !Ref "DBName"
        MasterUsername: !Ref "DBUser"
        MasterUserPassword: !Ref "DBPassword"
        BackupRetentionPeriod: !Ref BackupRetentionPeriod
        PreferredBackupWindow: !Ref PreferredBackupWindow
        PreferredMaintenanceWindow: !Ref PreferredMaintenanceWindow
        DBSubnetGroupName: !Ref "RDSDBSubnetGroup"
        DBClusterParameterGroupName: !Ref AuroraParameterGroup
        Port: 5432
        VpcSecurityGroupIds:
          - !Ref "RDSEC2SecurityGroup"

    DatabasePrimaryInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        Engine: aurora-postgresql
        DBClusterIdentifier: !Ref "DatabaseCluster"
        DBSubnetGroupName: !Ref "RDSDBSubnetGroup"
        DBInstanceClass: db.r4.large

    DatabaseReplicaInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        Engine: aurora-postgresql
        DBClusterIdentifier: !Ref "DatabaseCluster"
        DBSubnetGroupName: !Ref "RDSDBSubnetGroup"
        DBInstanceClass: db.r4.large

    AuroraParameterGroup:
        Type: AWS::RDS::DBClusterParameterGroup
        Properties:
            Family: aurora-postgresql10
            Description: !Sub "${Env} ${DBName} RDS Parameter Group"
            Parameters:
                shared_preload_libraries: 'pg_stat_statements'
    RDSDBSubnetGroup:
        Type: "AWS::RDS::DBSubnetGroup"
        Properties:
            DBSubnetGroupDescription: !Sub "${Env} ${DBName} RDS Subnet Group"
            DBSubnetGroupName: !Sub "${Env}-${DBName}-subnetgroup"
            SubnetIds:
                - Fn::ImportValue:
                    !Sub "${Env}-PrivateSubnet1"
                - Fn::ImportValue:
                    !Sub "${Env}-PrivateSubnet2"
                - Fn::ImportValue:
                    !Sub "${Env}-PrivateSubnet3"
            Tags:
                - Key: "Name"
                  Value: !Sub "${Env}-${DBName}-subnetgroup"
    RDSEC2SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: !Sub "${Env}-${DBName}-SG"
            GroupDescription: "Enable inbound connections from VPC CIDR"
            VpcId:
                Fn::ImportValue:
                    !Sub "${Env}-VPC"
            SecurityGroupIngress:
                - IpProtocol: tcp
                  FromPort: '5432'
                  ToPort: '5432'
                  CidrIp:
                    Fn::ImportValue:
                        !Sub "${Env}-VPCCidrBlock"
            Tags:
                - Key: "Name"
                  Value: !Sub "${Env}-${DBName}-SG"
Outputs:
  RDSEC2SecurityGroup:
    Description: A reference to the RDS Security Group Id
    Value:
      Fn::GetAtt:
      - RDSEC2SecurityGroup
      - GroupId
    Export:
        Name: !Join [ "-", [ !Ref Env, RDSEC2SecurityGroup ] ]
  RDSDBEndpoint:
    Description: A reference to the RDS Instance endpoint
    Value:
      Fn::GetAtt:
      - DatabaseCluster
      - Endpoint.Address
    Export:
        Name: !Join [ "-", [ !Ref Env, db, endpoint] ]
  DatabaseClusterReadEndpoint:
    Description: A reference to the RDS Instance Reader endpoint
    Value:
      Fn::GetAtt:
      - DatabaseCluster
      - ReadEndpoint.Address
    Export:
        Name:
          Fn::Sub: ${Env}-db-ReadEndpointAddress

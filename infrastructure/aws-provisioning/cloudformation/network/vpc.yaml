---
Description:
  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availability Zones. It deploys an Internet Gateway, with a default
  route on the public subnets. It deploys a pair of NAT Gateways (one in each AZ),
  and default routes for them in the private subnets.
Parameters:
  Env:
      Description: An environment name that will be prefixed to resource names
      Type: String
  SecondOctet:
    Description: 'Second Octet of VPC (10.XXX.0.0/16)'
    Type: Number
    Default: 0
    ConstraintDescription: 'Must be in the range [0-255]'
    MinValue: 0
    MaxValue: 255
  ClusterName:
    Type: String
    Description: This parameter is used to tag VPC Subnets with EKS Cluster Name so EKS can discover instances
Resources:
  VPC:
      Type: AWS::EC2::VPC
      Properties:
          EnableDnsHostnames: true
          EnableDnsSupport: true
          CidrBlock: !Sub '10.${SecondOctet}.0.0/16'
          Tags:
              - Key: Name
                Value: !Ref Env
  InternetGateway:
      Type: AWS::EC2::InternetGateway
      Properties:
          Tags:
              - Key: Name
                Value: !Ref Env
  InternetGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
          InternetGatewayId: !Ref InternetGateway
          VpcId: !Ref VPC
  PublicSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Sub '10.${SecondOctet}.101.0/24'
          MapPublicIpOnLaunch: true
          Tags:
              - Key: Name
                Value: !Sub ${Env} Public Subnet (AZ1)
              - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
                Value: shared
  PublicSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Sub '10.${SecondOctet}.131.0/24'
          MapPublicIpOnLaunch: true
          Tags:
              - Key: Name
                Value: !Sub ${Env} Public Subnet (AZ2)
              - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
                Value: shared

  PublicSubnet3:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 2, !GetAZs '' ]
          CidrBlock: !Sub '10.${SecondOctet}.161.0/24'
          MapPublicIpOnLaunch: true
          Tags:
              - Key: Name
                Value: !Sub ${Env} Public Subnet (AZ3)
              - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
                Value: shared
  PrivateSubnet1:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 0, !GetAZs '' ]
          CidrBlock: !Sub '10.${SecondOctet}.1.0/24'
          MapPublicIpOnLaunch: false
          Tags:
              - Key: Name
                Value: !Sub ${Env} Private Subnet (AZ1)
              - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
                Value: shared
  PrivateSubnet2:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 1, !GetAZs '' ]
          CidrBlock: !Sub '10.${SecondOctet}.31.0/24'
          MapPublicIpOnLaunch: false
          Tags:
              - Key: Name
                Value: !Sub ${Env} Private Subnet (AZ2)
              - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
                Value: shared
  PrivateSubnet3:
      Type: AWS::EC2::Subnet
      Properties:
          VpcId: !Ref VPC
          AvailabilityZone: !Select [ 2, !GetAZs '' ]
          CidrBlock: !Sub '10.${SecondOctet}.61.0/24'
          MapPublicIpOnLaunch: false
          Tags:
              - Key: Name
                Value: !Sub ${Env} Private Subnet (AZ3)
              - Key: !Sub "kubernetes.io/cluster/${ClusterName}"
                Value: shared
  NatGateway1EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
          Domain: vpc
  NatGateway2EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
          Domain: vpc
  NatGateway3EIP:
      Type: AWS::EC2::EIP
      DependsOn: InternetGatewayAttachment
      Properties:
          Domain: vpc
  NatGateway1:
      Type: AWS::EC2::NatGateway
      Properties:
          AllocationId: !GetAtt NatGateway1EIP.AllocationId
          SubnetId: !Ref PublicSubnet1
  NatGateway2:
      Type: AWS::EC2::NatGateway
      Properties:
          AllocationId: !GetAtt NatGateway2EIP.AllocationId
          SubnetId: !Ref PublicSubnet2
  NatGateway3:
      Type: AWS::EC2::NatGateway
      Properties:
          AllocationId: !GetAtt NatGateway3EIP.AllocationId
          SubnetId: !Ref PublicSubnet3
  PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
              - Key: Name
                Value: !Sub ${Env} Public Routes
  DefaultPublicRoute:
      Type: AWS::EC2::Route
      DependsOn: InternetGatewayAttachment
      Properties:
          RouteTableId: !Ref PublicRouteTable
          DestinationCidrBlock: 0.0.0.0/0
          GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet1
  PublicSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet2
  PublicSubnet3RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PublicRouteTable
          SubnetId: !Ref PublicSubnet3
  PrivateRouteTable1:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
              - Key: Name
                Value: !Sub ${Env} Private Routes (AZ1)
  DefaultPrivateRoute1:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTable1
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway1
  PrivateSubnet1RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTable1
          SubnetId: !Ref PrivateSubnet1
  PrivateRouteTable2:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
              - Key: Name
                Value: !Sub ${Env} Private Routes (AZ2)
  DefaultPrivateRoute2:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTable2
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway2
  PrivateSubnet2RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTable2
          SubnetId: !Ref PrivateSubnet2
  PrivateRouteTable3:
      Type: AWS::EC2::RouteTable
      Properties:
          VpcId: !Ref VPC
          Tags:
              - Key: Name
                Value: !Sub ${Env} Private Routes (AZ3)
  DefaultPrivateRoute3:
      Type: AWS::EC2::Route
      Properties:
          RouteTableId: !Ref PrivateRouteTable3
          DestinationCidrBlock: 0.0.0.0/0
          NatGatewayId: !Ref NatGateway3
  PrivateSubnet3RouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
          RouteTableId: !Ref PrivateRouteTable3
          SubnetId: !Ref PrivateSubnet3
  NoIngressSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
          GroupName: "no-ingress-sg"
          GroupDescription: "Security group with no ingress rule"
          VpcId: !Ref VPC
Outputs:
  VPC:
      Description: A reference to the created VPC
      Value: !Ref VPC
      Export:
          Name: !Join [ "-", [ !Ref Env, VPC ] ]
  VPCCidrBlock:
      Description: VPC CIDR Block
      Value: !GetAtt VPC.CidrBlock
      Export:
          Name: !Join [ "-", [ !Ref Env, VPCCidrBlock ] ]
  PublicSubnets:
      Description: A list of the public subnets
      Value: !Join [ ",", [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3 ]]
      Export:
          Name: !Join [ "-", [ !Ref Env, PublicSubnets ] ]
  PrivateSubnets:
      Description: A list of the private subnets
      Value: !Join [ ",", [ !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3 ]]
      Export:
          Name: !Join [ "-", [ !Ref Env, PrivateSubnets ] ]
  PublicSubnet1:
      Description: A reference to the public subnet in the 1st Availability Zone
      Value: !Ref PublicSubnet1
      Export:
          Name: !Join [ "-", [ !Ref Env, PublicSubnet1 ] ]
  PublicSubnet2:
      Description: A reference to the public subnet in the 2nd Availability Zone
      Value: !Ref PublicSubnet2
      Export:
          Name: !Join [ "-", [ !Ref Env, PublicSubnet2 ] ]
  PublicSubnet3:
      Description: A reference to the public subnet in the 3rd Availability Zone
      Value: !Ref PublicSubnet3
      Export:
          Name: !Join [ "-", [ !Ref Env, PublicSubnet3 ] ]
  PrivateSubnet1:
      Description: A reference to the private subnet in the 1st Availability Zone
      Value: !Ref PrivateSubnet1
      Export:
          Name: !Join [ "-", [ !Ref Env, PrivateSubnet1 ] ]
  PrivateSubnet2:
      Description: A reference to the private subnet in the 2nd Availability Zone
      Value: !Ref PrivateSubnet2
      Export:
          Name: !Join [ "-", [ !Ref Env, PrivateSubnet2 ] ]
  PrivateSubnet3:
      Description: A reference to the private subnet in the 3rd Availability Zone
      Value: !Ref PrivateSubnet3
      Export:
          Name: !Join [ "-", [ !Ref Env, PrivateSubnet3 ] ]
  NoIngressSecurityGroup:
      Description: Security group with no ingress rule
      Value: !Ref NoIngressSecurityGroup
      Export:
          Name: !Join [ "-", [ !Ref Env, NoIngressSecurityGroup ] ]

# Default values for jenkins.
# This is a YAML-formatted file.
# Declare name/value pairs to be passed into your templates.
# name: value

## Overrides for generated resource names
# See templates/_helpers.tpl
# nameOverride:
# fullnameOverride:
master:
  hostName: jenkins.cloudision.com
  name: jenkins-master
  image: "jenkins/jenkins"
  imageTag: "lts"
  imagePullPolicy: "Always"
# ImagePullSecret: jenkins
  component: "jenkins-master"
  numExecutors: 4
  useSecurity: true
  # SecurityRealm:
  # Optionally configure a different AuthorizationStrategy using Jenkins XML
  # AuthorizationStrategy: |-
  #    <authorizationStrategy class="hudson.security.FullControlOnceLoggedInAuthorizationStrategy">
  #      <denyAnonymousReadAccess>true</denyAnonymousReadAccess>
  #    </authorizationStrategy>
  hostNetworking: false
  adminUser: admin
  AdminPassword: Ayt65rUsyvc
  resources:
    requests:
      cpu: "0.5"
      memory: "5Gi"
    limits:
      cpu: "0.5"
      memory: "5Gi"
  # Environment variables that get added to the init container (useful for e.g. http_proxy)
  # InitContainerEnv:
  #   - name: http_proxy
  #     value: "http://192.168.64.1:3128"
  # ContainerEnv:
  #   - name: http_proxy
  #     value: "http://192.168.64.1:3128"
  # Set min/max heap here if needed with:
  javaOpts: "-Xms4g -Xmx4g"
  # JenkinsOpts: ""
  # JenkinsUrl: ""
  # If you set this prefix and use ingress controller then you might want to set the ingress path below
  # JenkinsUriPrefix: "/jenkins"
  # Enable pod security context (must be `true` if RunAsUser or FsGroup are set)
  usePodSecurityContext: true
  # Set RunAsUser to 1000 to let Jenkins run as non-root user 'jenkins' which exists in 'jenkins/jenkins' docker image.
  # When setting RunAsUser to a different value than 0 also set FsGroup to the same value:
  # RunAsUser: <defaults to 0>
  # FsGroup: <will be omitted in deployment if RunAsUser is 0>
  servicePort: 8080
  # For minikube, set this to NodePort, elsewhere use LoadBalancer
  # Use ClusterIP if your setup includes ingress controller
  serviceType: ClusterIP
  # Master Service annotations
  serviceAnnotations: {}
  # Master Custom Labels
  deploymentLabels:
  #   foo: bar
  #   bar: foo
  # Master Service Labels
  serviceLabels: {}
  #   service.beta.kubernetes.io/aws-load-balancer-backend-protocol: https
  # Used to create Ingress record (should used with ServiceType: ClusterIP)
  # HostName: jenkins.cluster.local
  # NodePort: <to set explicitly, choose port between 30000-32767
  # Enable Kubernetes Liveness and Readiness Probes
  # ~ 2 minutes to allow Jenkins to restart when upgrading plugins. Set ReadinessTimeout to be shorter than LivenessTimeout.
  healthProbes: true
  healthProbesLivenessTimeout: 90
  healthProbesReadinessTimeout: 60
  healthProbeReadinessPeriodSeconds: 10
  healthProbeLivenessFailureThreshold: 12
  slaveListenerPort: 30001
  disabledAgentProtocols:
    - JNLP-connect
    - JNLP2-connect
  csrf:
    defaultCrumbIssuer:
      enabled: true
      proxyCompatability: true
  cli: false
  # Kubernetes service type for the JNLP slave service
  # SlaveListenerServiceType is the Kubernetes Service type for the JNLP slave service,
  # either 'LoadBalancer', 'NodePort', or 'ClusterIP'
  # Note if you set this to 'LoadBalancer', you *must* define annotations to secure it. By default
  # this will be an external load balancer and allowing inbound 0.0.0.0/0, a HUGE
  # security risk:  https://github.com/kubernetes/charts/issues/1341
  slaveListenerServiceType: NodePort
  slaveListenerServiceAnnotations: {}

  # Example of 'LoadBalancer' type of slave listener with annotations securing it
  # SlaveListenerServiceType: LoadBalancer
  # SlaveListenerServiceAnnotations:
  #   service.beta.kubernetes.io/aws-load-balancer-internal: "True"
  #   service.beta.kubernetes.io/load-balancer-source-ranges: "172.0.0.0/8, 10.0.0.0/8"

  # LoadBalancerSourcesRange is a list of allowed CIDR values, which are combined with ServicePort to
  # set allowed inbound rules on the security group assigned to the master load balancer
  loadBalancerSourceRanges:
  - 0.0.0.0/0
  # Optionally assign a known public LB IP
  # LoadBalancerIP: 1.2.3.4
  # Optionally configure a JMX port
  # requires additional JavaOpts, ie
  # JavaOpts: >
  #   -Dcom.sun.management.jmxremote.port=4000
  #   -Dcom.sun.management.jmxremote.authenticate=false
  #   -Dcom.sun.management.jmxremote.ssl=false
  # JMXPort: 4000
  # Optionally configure other ports to expose in the Master container
  extraPorts:
  # - name: BuildInfoProxy
  #   port: 9000
  # List of plugins to be install during Jenkins master start
  # installPlugins:
    # - kubernetes:1.15.3
    # - workflow-job:2.32
    # - workflow-aggregator:2.6
    # - credentials-binding:1.18
    # - git:3.9.3
    # - ansicolor:0.6.2
    # - timestamper:1.9
    # - github-oauth:0.32
    # - antisamy-markup-formatter:1.5
    # - simple-theme-plugin:0.5.1
    # - github-organization-folder:1.6
    # - jenkins-multijob-plugin:1.32
    # - parameterized-scheduler:0.6.3
    # - throttle-concurrents:2.0.1
    # - slack:2.23
    # - xunit:2.3.3
    # - sbt:1.5
    # - emailext-template:1.1
    # - pipeline-utility-steps:2.3.0
  # Enable HTML parsing using OWASP Markup Formatter Plugin (antisamy-markup-formatter), useful with ghprb plugin.
  # The plugin is not installed by default, please update Master.InstallPlugins.
  # EnableRawHtmlMarkupFormatter: true
  # Used to approve a list of groovy functions in pipelines used the script-security plugin. Can be viewed under /scriptApproval
  # ScriptApproval:
  #   - "method groovy.json.JsonSlurperClassic parseText java.lang.String"
  #   - "new groovy.json.JsonSlurperClassic"
  # List of groovy init scripts to be executed during Jenkins master start
  initScripts:
  #  - |
  #    print 'adding global pipeline libraries, register properties, bootstrap jobs...'
  # Kubernetes secret that contains a 'credentials.xml' for Jenkins
  # CredentialsXmlSecret: jenkins-credentials
  # Kubernetes secret that contains files to be put in the Jenkins 'secrets' directory,
  # useful to manage encryption keys used for credentials.xml for instance (such as
  # master.key and hudson.util.Secret)
  # SecretsFilesSecret: jenkins-secrets
  # Jenkins XML job configs to provision
  # Jobs:
  #   test: |-
  #     <<xml here>>
  customConfigMap: false
  # By default, the configMap is only used to set the initial config the first time
  # that the chart is installed.  Setting `OverwriteConfig` to `true` will overwrite
  # the jenkins config with the contents of the configMap every time the pod starts.
  overwriteConfig: false
  # Node labels and tolerations for pod assignment
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
  nodeSelector: {}
  tolerations: {}
  podAnnotations: {}

  ingress:
    enabled: true
    apiVersion: extensions/v1beta1
    annotations:
      kubernetes.io/ingress.class: nginx-ingress
    # kubernetes.io/tls-acme: "true"
    hostName: jenkins.cloudision.com
    # Set this path to JenkinsUriPrefix above or use annotations to rewrite path
    # Path: "/jenkins"

    tls:
     - secretName: web-application-tls
       hosts:
         - jenkins.cloudision.com
  additionalConfig: {}

# agent:
#   enabled: true
#   image: ''
#   imageTag: 2.0.9
#   customJenkinsLabels: []
# # ImagePullSecret: jenkins
#   component: "jenkins-slave"
#   privileged: true
#   resources:
#     requests:
#       cpu: "50m"
#       memory: "8Gi"
#     limits:
#       cpu: "4"
#       memory: "12Gi"
#   # You may want to change this to true while testing a new image
#   alwaysPullImage: false
#   # Controls how slave pods are retained after the Jenkins build completes
#   # Possible values: Always, Never, OnFailure
#   podRetention: Never
#   # You can define the volumes that you want to mount for this container
#   # Allowed types are: ConfigMap, EmptyDir, HostPath, Nfs, Pod, Secret
#   # Configure the attributes as they appear in the corresponding Java class for that type
#   # https://github.com/jenkinsci/kubernetes-plugin/tree/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/volumes
#   volumes:
#    - type: EmptyDir
#      mountPath: /home/jenkins/.gradle
#    - type: HostPath
#      mountPath: /var/run/docker.sock
#      hostPath: /var/run/docker.sock
#    - type: Secret
#      secretName: jenkins-jnlp
#      mountPath: /home/jenkins/.gitconfig
#      subPath: .gitconfig
#    - type: Secret
#      secretName: jenkins-jnlp
#      mountPath: /home/jenkins/.netrc
#      subPath: .netrc
#    - type: Secret
#      secretName: jenkins-jnlp
#      mountPath: /home/jenkins/.spin/config
#      subPath: config
#    - type: Secret
#      secretName: jenkins-jnlp
#      mountPath: /home/jenkins/.gradle/gradle.properties
#      subPath: gradle.properties
#    - type: Secret
#      secretName: jenkins-jnlp
#      mountPath: /home/jenkins/.now/now-auth.json
#      subPath: now-auth.json
#    - type: Secret
#      secretName: jenkins-jnlp
#      mountPath: /home/jenkins/.now/now-config.json
#      subPath: now-config.json
#    - type: Secret
#      secretName: jenkins-jnlp
#      mountPath: /home/jenkins/.npmrc
#      subPath: npmrc
  # nodeSelector:
  #    nodePurpose: dev-jenkins-worker
  # Key Value selectors. Ex:
  # jenkins-agent: v1

persistence:
  enabled: true
  existingClaim: efs
  annotations: {}
  accessMode: ReadWriteOnce
  subPath: jenkins
  volumes:
  # - name: jenkins
  #   nfs:
  #     path: /pvs/jenkins
  #     server: fs-a9157700.efs.us-west-2.amazonaws.com
  mounts:
  #  - mountPath: /var/jenkins_home/
  #    name: jenkins
  #    readOnly: false


  ## A manually managed Persistent Volume and Claim
  ## Requires Persistence.Enabled: true
  ## If defined, PVC must be created manually before volume will be bound
  #existingClaim: dev-efs

  ## jenkins data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # StorageClass: "-"

  annotations: {}
  accessMode: ReadWriteOnce
  size: 8Gi
  volumes:
  #  - name: nothing
  #    emptyDir: {}
  mounts:
  #  - mountPath: /var/nothing
  #    name: nothing
  #    readOnly: true

networkPolicy:
  # Enable creation of NetworkPolicy resources.
  enabled: false
  # For Kubernetes v1.4, v1.5 and v1.6, use 'extensions/v1beta1'
  # For Kubernetes v1.7, use 'networking.k8s.io/v1'
  apiVersion: networking.k8s.io/v1

## Install Default RBAC roles and bindings
rbac:
  install: false
  serviceAccount:
    name: default

## Backup cronjob configuration
## Ref: https://github.com/nuvo/kube-tasks
backup:
  # Backup must use RBAC
  # So by enabling backup you are enabling RBAC specific for backup
  enabled: false

  # Schedule to run jobs. Must be in cron time format
  # Ref: https://crontab.guru/
  schedule: "0 2 * * *"

  annotations:
    # Example for authorization to AWS S3 using kube2iam
    # Can also be done using environment variables
    iam.amazonaws.com/role: jenkins

  image:
    repository: nuvo/kube-tasks
    tag: 0.1.2

  # Additional arguments for kube-tasks
  # Ref: https://github.com/nuvo/kube-tasks#simple-backup
  extraArgs: []

  # Add additional environment variables
  env:
  # Example environment variable required for AWS credentials chain
  - name: AWS_REGION
    value: us-east-1
  - name: JAVA_OPTS
    value: -Xms2g -Xmx2g

  # Destination to store the backup artifacts
  # Supported cloud storage services: AWS S3, Minio S3, Azure Blob Storage
  # Additional support can added. Visit this repository for details
  # Ref: https://github.com/nuvo/skbn
  destination: s3://nuvo-jenkins-data/backup
